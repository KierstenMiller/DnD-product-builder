$base-font-size: 62.5%; // using percentage here to chrange browser's base font-size from 16px to 10px, which is easier to think around
$font-unit: 1rem;
// maps
$font-sizes: (
    xx-small: $font-unit,
    x-small: calc(1.25 * var($font-unit)),
    small: calc(1.5 * var($font-unit)),
    medium: calc(1.75 * var($font-unit)),
    large: calc(2 * var($font-unit)),
    x-large: calc(2.25 * var($font-unit)),
    xx-large: calc(2.5 * var($font-unit)),
);
$spacing-sizes: (
    xxx-small: 1px,
    xx-small: 2px,
    x-small: 4px,
    small: 8px,
    medium: 16px,
    large: 24px,
    x-large: 32px,
    xx-large: 40px,
    xxx-large: 48px,
    xxxx-large: 56px,
    huge: 64px,
    x-huge: 72px,
    xx-huge: 80px,
    xxx-huge: 88px,
    xxxx-huge: 96px,
);
$colors: (
    red: #ff3538,
    grey: (base: #404145,
        light: #c7c7cd),
    yellow: (base: #ecaf2d),
    green: (base: #5ad864)
);

// functions
@function getFontSize($size) {
    @return map-get($font-sizes, $size);
}

@function getSpace($size) {
    @return map-get($spacing-sizes, $size);
}

@function getColor($scheme, $tone: base) {
    @return map-get(map-get($colors, $scheme), $tone);
}

// mixins
@mixin modifiers($map, $attribute, $prefix: '-', $seperator: '-', $base: 'base') {
    @each $key,
    $value in $map {
        // if key is specified as the 'base', do not add key to class's name
        &#{if($key != $base, #{$prefix}#{$key}, '')}
        {// if current value of key-value pair is another map, recurse
        @if type-of($value)=='map' {
            @include modifiers($value, $attribute, $seperator);
        }
        @else {
            #{$attribute}: $value;
        }
    }
}
}

// class generators
.text {
    @include modifiers($colors, 'color');
    @include modifiers($font-sizes, 'font-size');
}

.m {
    @include modifiers($spacing-sizes, 'margin');
    @include modifiers($spacing-sizes, 'margin-top', 't-');
    @include modifiers($spacing-sizes, 'margin-right', 'r-');
    @include modifiers($spacing-sizes, 'margin-bottom', 'b-');
    @include modifiers($spacing-sizes, 'margin-left', 'l-');
}

.p {
    @include modifiers($spacing-sizes, 'padding');
    @include modifiers($spacing-sizes, 'padding-top', 't-');
    @include modifiers($spacing-sizes, 'padding-right', 'r-');
    @include modifiers($spacing-sizes, 'padding-bottom', 'b-');
    @include modifiers($spacing-sizes, 'padding-left', 'l-');
}