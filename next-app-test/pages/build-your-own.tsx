import Head from 'next/head'

import { BuildYourOwnModel } from '-/page-components/build-your-own/build-your-own-model'
import { BuildYourOwnPage } from '-/page-components/build-your-own/build-your-own-page'
import { mockModifierA, mockModifierB, mockModifierC, mockModifierD, mockModifierE } from '-/data/mock/mockModifiers.data'
import { BasicAccordion } from '-/Components/accordion/basic-accordion'
import { robotModifiers } from '-/data/robots/robotModifiers.data'

// K-TODO: move
// const data = {
//     modifiers: [mockModifierA, mockModifierB, mockModifierC, mockModifierD, mockModifierE],
// }

const data = {
    modifiers: robotModifiers,
}

const BuildYourOwn = () => {
    // K-TODO: do this data massaging in getServerSideProps (if that is the method you choose for getting data)
    const model =  new BuildYourOwnModel({
        config: data.modifiers.map(mod => ({ id: mod.id, selection: mod.options[0].id }))
    });

    return (
        <>
            <Head>
                <title>Custom Quilt Builder</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="flex a-i-center">
                <BasicAccordion
                    headerText="Project Goals"
                    headerLevel={3}
                    id="goals"
                >
                    <div className="m-x-large">
                        <p>Goal: optimize first paint: provide only info that is needed OR cache all info server-side</p>
                        <p>Goal: SEO for procuts</p>
                        <p>Goal: allow a given product with a given productId to have multiple "looks"</p>
                        <p>Goal: Allow api to decide presentation of the modifier component.</p>
                        <p>Goal: Allow api to decide presentation of the workspace component</p>
                        <p>Goal: Make MobX model agnostic of configuration</p>
                        <p>Goal: Shallow update (do not effect browser's history) url on config change</p>
                        <p>Goal: Include error handling</p>
                        <ul>
                            <li>input radio checks if all ids are unique, if not provide error handling (create unique ids and provide console.warn?)</li>
                            <li>what if a display is not provided for modifier</li>
                        </ul>
                    </div>
                    
                </BasicAccordion>
                <span className="ml-medium"><b>UP NEXT:</b> Implement workspaces A and B <br/> A:SINGLETON . . .  B:FREEFORM_GRID</span>
            </div>
            <BuildYourOwnPage model={model} modifiers={data.modifiers} />
        </>
    )
};

export default BuildYourOwn;
